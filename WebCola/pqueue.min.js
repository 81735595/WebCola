var PairingHeap=function(){function n(n){this.elem=n,this.subheaps=[]}return n.prototype.toString=function(n){for(var t="",r=!1,u,i=0;i<this.subheaps.length;++i){if(u=this.subheaps[i],!u.elem){r=!1;continue}r&&(t=t+","),t=t+u.toString(n),r=!0}return t!==""&&(t="("+t+")"),(this.elem?n(this.elem):"")+t},n.prototype.min=function(){return this.elem},n.prototype.empty=function(){return this.elem==null},n.prototype.insert=function(t,i){return this.merge(new n(t),i)},n.prototype.merge=function(n,t){return this.empty()?n:n.empty()?this:t(this.elem,n.elem)?(this.subheaps.push(n),this):(n.subheaps.push(this),n)},n.prototype.removeMin=function(n){return this.empty()?null:this.mergePairs(n)},n.prototype.mergePairs=function(t){if(this.subheaps.length==0)return new n(null);if(this.subheaps.length==1)return this.subheaps[0];var i=this.subheaps.pop().merge(this.subheaps.pop(),t),r=this.mergePairs(t);return i.merge(r,t)},n.prototype.decreaseKey=function(t,i,r){var f=t.removeMin(r),u,e;return t.elem=f.elem,t.subheaps=f.subheaps,u=new n(i),e=this.merge(u,r),{root:e,newNode:u}},n}(),PriorityQueue=function(){function n(n){this.lessThan=n}return n.prototype.top=function(){return this.empty()?null:this.root.elem},n.prototype.push=function(){for(var n,i,t=0;t<arguments.length;++t)i=arguments[t],n=new PairingHeap(i),this.root=this.empty()?n:this.root.merge(n,this.lessThan);return n},n.prototype.empty=function(){return!this.root||!this.root.elem},n.prototype.pop=function(){if(this.empty())return null;var n=this.root.min();return this.root=this.root.removeMin(this.lessThan),n},n.prototype.reduceKey=function(n,t){var i=this.root.decreaseKey(n,t,this.lessThan);return this.root=i.root,i.newNode},n.prototype.toString=function(n){return this.root.toString(n)},n}()